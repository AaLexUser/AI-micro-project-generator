FROM python:3.12-slim AS base
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1
WORKDIR /app

FROM base AS builder
RUN apt-get update && apt-get install -y --no-install-recommends build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy full source for building
COPY . /app

# Install dependencies and build wheels
RUN pip install --upgrade pip \
    && pip wheel --wheel-dir /wheels /app

FROM base AS runtime
# Install Docker CLI for sandbox execution
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    gnupg \
    && install -m 0755 -d /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg \
    && chmod a+r /etc/apt/keyrings/docker.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y --no-install-recommends docker-ce-cli \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN addgroup --system app && adduser --system --ingroup app app

# Install runtime deps from built wheels only
COPY --from=builder /wheels /wheels
RUN pip install --no-cache-dir --no-index --find-links=/wheels ai-micro-project-generator \
    && rm -rf /wheels

# Copy runtime assets that are not included in the installed package (configs and prompting)
COPY aipg/configs /app/aipg/configs
COPY aipg/prompting/prompts /app/aipg/prompting/prompts

# Create necessary directories with proper permissions
RUN mkdir -p /app/data /app/aipg/cache && \
    chown -R app:app /app

# Seed default config if missing
RUN if [ -f "/app/aipg/configs/default.yaml.example" ] && [ ! -f "/app/aipg/configs/default.yaml" ]; then \
      cp /app/aipg/configs/default.yaml.example /app/aipg/configs/default.yaml; \
    fi

USER app
EXPOSE 8000
CMD ["python", "-m", "aipg.api"]
